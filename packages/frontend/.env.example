# DevAPI Manager 前端环境变量配置示例
# 复制此文件为 .env 并根据实际情况修改配置

# ===== 🚀 统一端口管理系统 =====
# 为了避免硬编码端口号，我们采用环境变量统一管理所有服务端口
# 详细说明请参考：src/config/PORTS.md

# ===== 🔧 基础配置 =====
# 后端 API 服务器（推荐使用，优先级最高）
# 如果设置了完整的 API URL，将忽略下面的主机和端口配置
# VITE_API_URL=http://localhost:3000/api/v1

# ===== 🌐 服务器地址配置 =====
# 后端服务器配置（Express.js + MCP HTTP 集成）
# 注意：后端会自动检测可用端口，通常从3000开始，如果被占用会递增到3000
VITE_BACKEND_HOST=localhost
VITE_BACKEND_PORT=3000

# MCP HTTP 服务器配置（与后端集成，通常使用相同端口）
VITE_MCP_HTTP_HOST=localhost
VITE_MCP_HTTP_PORT=3000

# MCP WebSocket 服务器配置（实时通信）
VITE_MCP_WS_HOST=localhost
VITE_MCP_WS_PORT=3000

# ===== 📋 服务架构说明 =====
# 🔹 后端服务器 (3000): Express.js API + 集成 MCP HTTP 服务
# 🔹 前端开发服务器 (5173): Vite 开发服务器
# 🔹 独立 MCP 服务器 (3000): 仅在开发环境使用的独立 MCP 服务

# ===== 🏠 本地开发环境 =====
# 标准本地开发配置，所有服务使用默认端口
# VITE_BACKEND_HOST=localhost
# VITE_BACKEND_PORT=3000
# VITE_MCP_HTTP_HOST=localhost
# VITE_MCP_HTTP_PORT=3000
# VITE_MCP_WS_HOST=localhost
# VITE_MCP_WS_PORT=3000

# ===== 🌐 生产环境配置 =====
# 生产服务器配置示例
# VITE_BACKEND_HOST=api.your-domain.com
# VITE_BACKEND_PORT=443
# VITE_MCP_HTTP_HOST=api.your-domain.com
# VITE_MCP_HTTP_PORT=443
# VITE_MCP_WS_HOST=ws.your-domain.com
# VITE_MCP_WS_PORT=443

# ===== 🏢 局域网环境配置 =====
# 局域网访问配置示例
# VITE_BACKEND_HOST=192.168.1.100
# VITE_BACKEND_PORT=3000
# VITE_MCP_HTTP_HOST=192.168.1.100
# VITE_MCP_HTTP_PORT=3000
# VITE_MCP_WS_HOST=192.168.1.100
# VITE_MCP_WS_PORT=3000

# ===== 🐳 Docker 容器环境 =====
# Docker Compose 环境配置示例
# VITE_BACKEND_HOST=backend
# VITE_BACKEND_PORT=3000
# VITE_MCP_HTTP_HOST=backend
# VITE_MCP_HTTP_PORT=3000
# VITE_MCP_WS_HOST=backend
# VITE_MCP_WS_PORT=3000

# ===== 🔧 端口冲突解决 =====
# 如果遇到端口冲突，可以修改端口号：
# VITE_BACKEND_PORT=3000
# VITE_MCP_HTTP_PORT=3000
# VITE_MCP_WS_PORT=3000

# ===== 🚨 注意事项 =====
# 1. 端口号必须在 1-65535 范围内
# 2. 确保前后端端口配置一致
# 3. 生产环境建议使用 HTTPS (443端口)
# 4. Docker 环境使用服务名作为主机名
# 5. 局域网访问需要确保防火墙设置正确

# ===== 🔍 调试配置 =====
# 开发环境下会自动输出配置信息到控制台
# 可以通过浏览器开发者工具查看实际使用的配置

# ===== 📚 相关文档 =====
# - 端口配置说明: src/config/PORTS.md
# - 环境配置管理: src/config/env.ts
# - MCP 配置管理: src/config/mcpConfig.ts
