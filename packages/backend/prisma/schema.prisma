// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      String @default("ACTIVE")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  apis API[]
  tags Tag[]

  @@map("projects")
}

model API {
  id           String     @id @default(uuid())
  projectId    String
  name         String
  method       String
  path         String
  description  String?
  parameters   String?
  responses    String?
  status       String @default("NOT_STARTED")
  frontendCode String?
  backendCode  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  apiTags APITag[]

  @@index([projectId])
  @@index([status])
  @@index([method])
  @@map("apis")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#3B82F6")
  projectId String
  createdAt DateTime @default(now())

  // Relations
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  apiTags APITag[]

  @@unique([name, projectId])
  @@index([projectId])
  @@map("tags")
}

model APITag {
  apiId String
  tagId String

  // Relations
  api API @relation(fields: [apiId], references: [id], onDelete: Cascade)
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([apiId, tagId])
  @@map("api_tags")
}

// Note: SQLite doesn't support enums, so we use String with validation in application layer
// ProjectStatus: "ACTIVE" | "ARCHIVED" | "DELETED"
// APIStatus: "NOT_STARTED" | "IN_PROGRESS" | "COMPLETED" | "NOT_TESTED" | "TESTED" | "DEPRECATED"
// HTTPMethod: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS"