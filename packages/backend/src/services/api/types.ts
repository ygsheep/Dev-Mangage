import { 
  APIEndpoint, 
  APIGroup, 
  APIParameter, 
  APIResponse, 
  APIExample, 
  APITestCase, 
  APITestSuite,
  APITestRun,
  APITestResult,
  APIEnvironment,
  APIDocumentation,
  APIHistory,
  SyncConfiguration,
  APITableMapping,
  Project,
  DatabaseTable,
  Prisma
} from '@prisma/client';

// API端点相关类型
export interface CreateAPIEndpointData {
  projectId: string;
  groupId?: string;
  name: string;
  displayName?: string;
  method: string;
  path: string;
  summary?: string;
  description?: string;
  tags?: string[];
  deprecated?: boolean;
  version?: string;
  authRequired?: boolean;
  authType?: string;
  scopes?: string[];
  rateLimit?: number;
  contentType?: string;
  produces?: string[];
  consumes?: string[];
  status?: string;
  implementationStatus?: string;
  testStatus?: string;
  frontendCode?: string;
  backendCode?: string;
  mockData?: any;
  relatedTableId?: string;
  autoGenerated?: boolean;
  syncedFromModel?: boolean;
  createdBy?: string;
  sortOrder?: number;
  isPublic?: boolean;
  parameters?: CreateAPIParameterData[];
  responses?: CreateAPIResponseData[];
  reason?: string;
}

export interface UpdateAPIEndpointData {
  groupId?: string;
  name?: string;
  displayName?: string;
  method?: string;
  path?: string;
  summary?: string;
  description?: string;
  tags?: string[];
  deprecated?: boolean;
  version?: string;
  authRequired?: boolean;
  authType?: string;
  scopes?: string[];
  rateLimit?: number;
  contentType?: string;
  produces?: string[];
  consumes?: string[];
  status?: string;
  implementationStatus?: string;
  testStatus?: string;
  frontendCode?: string;
  backendCode?: string;
  mockData?: any;
  relatedTableId?: string;
  syncedFromModel?: boolean;
  lastModifiedBy?: string;
  sortOrder?: number;
  isPublic?: boolean;
  reason?: string;
}

export interface APIEndpointWithRelations extends APIEndpoint {
  project: Project;
  group?: APIGroup | null;
  relatedTable?: DatabaseTable | null;
  parameters: APIParameter[];
  responses: APIResponse[];
  examples: APIExample[];
  testCases: APITestCase[];
  documentation: APIDocumentation[];
  history: APIHistory[];
  tableMappings: (APITableMapping & {
    table: DatabaseTable;
  })[];
}

// API参数类型
export interface CreateAPIParameterData {
  name: string;
  displayName?: string;
  type: string; // query, path, header, body, formData
  dataType: string; // string, integer, boolean, array, object, etc.
  format?: string;
  required?: boolean;
  defaultValue?: string;
  description?: string;
  example?: string;
  enum?: string[];
  minimum?: number;
  maximum?: number;
  pattern?: string;
  sortOrder?: number;
  minLength?: number;
  maxLength?: number;
  multipleOf?: number;
  items?: any; // JSON schema for array items
  properties?: any; // JSON schema for object properties
}

export interface UpdateAPIParameterData extends Partial<CreateAPIParameterData> {
  id?: string;
}

// API响应类型
export interface CreateAPIResponseData {
  statusCode: string;
  description?: string;
  contentType?: string;
  schema?: any; // JSON schema
  example?: any; // JSON example
  headers?: Record<string, string>;
  isDefault?: boolean;
}

export interface UpdateAPIResponseData extends Partial<CreateAPIResponseData> {
  id?: string;
}

// API分组类型
export interface CreateAPIGroupData {
  projectId: string;
  name: string;
  displayName?: string;
  description?: string;
  prefix?: string;
  color?: string;
  icon?: string;
  sortOrder?: number;
  parentId?: string;
  status?: string;
}

export interface UpdateAPIGroupData extends Partial<CreateAPIGroupData> {}

export interface APIGroupWithRelations extends APIGroup {
  project: Project;
  parent?: APIGroup | null;
  children: APIGroup[];
  endpoints: APIEndpoint[];
}

// API环境类型
export interface CreateAPIEnvironmentData {
  projectId: string;
  name: string;
  displayName?: string;
  description?: string;
  baseUrl: string;
  variables?: Record<string, any>;
  headers?: Record<string, string>;
  auth?: {
    type: string;
    token?: string;
    username?: string;
    password?: string;
    apiKey?: string;
    bearer?: string;
  };
  isDefault?: boolean;
  isActive?: boolean;
}

export interface UpdateAPIEnvironmentData extends Partial<CreateAPIEnvironmentData> {}

export interface APIEnvironmentWithRelations extends APIEnvironment {
  project: Project;
  testRuns: APITestRun[];
}

// API测试套件类型
export interface CreateAPITestSuiteData {
  projectId: string;
  name: string;
  description?: string;
  variables?: Record<string, any>;
  preScript?: string;
  postScript?: string;
  timeout?: number;
  isActive?: boolean;
}

export interface UpdateAPITestSuiteData extends Partial<CreateAPITestSuiteData> {}

export interface APITestSuiteWithRelations extends APITestSuite {
  project: Project;
  testCases: APITestCase[];
  testRuns: APITestRun[];
}

// API测试用例类型
export interface CreateAPITestCaseData {
  endpointId: string;
  suiteId?: string;
  name: string;
  description?: string;
  method: string;
  path: string;
  headers?: Record<string, string>;
  parameters?: Record<string, any>;
  body?: string;
  assertions?: TestAssertion[];
  preScript?: string;
  postScript?: string;
  timeout?: number;
  isActive?: boolean;
  priority?: string;
}

export interface UpdateAPITestCaseData extends Partial<CreateAPITestCaseData> {}

export interface TestAssertion {
  type: 'status' | 'header' | 'body' | 'json' | 'response_time';
  field?: string;
  operator: 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'greater_than' | 'less_than' | 'exists' | 'not_exists';
  value: any;
  description?: string;
}

export interface APITestCaseWithRelations extends APITestCase {
  endpoint: APIEndpoint;
  suite?: APITestSuite | null;
  results: APITestResult[];
}

// API测试运行类型
export interface CreateAPITestRunData {
  suiteId: string;
  environmentId: string;
  name?: string;
  createdBy?: string;
}

export interface APITestRunWithRelations extends APITestRun {
  suite: APITestSuite;
  environment: APIEnvironment;
  results: APITestResult[];
}

// API测试结果类型
export interface APITestResultWithRelations extends APITestResult {
  run: APITestRun;
  testCase: APITestCase;
}

// 同步配置类型
export interface CreateSyncConfigurationData {
  projectId: string;
  name: string;
  description?: string;
  isActive?: boolean;
  autoSync?: boolean;
  syncDirection?: 'MODEL_TO_API' | 'API_TO_MODEL' | 'BIDIRECTIONAL';
  conflictResolution?: 'MANUAL' | 'MODEL_WINS' | 'API_WINS' | 'MERGE';
  tableToEndpointMapping?: Record<string, any>;
  fieldToParameterMapping?: Record<string, any>;
  namingConvention?: 'CAMEL_CASE' | 'SNAKE_CASE' | 'KEBAB_CASE';
  includeTables?: string[];
  excludeTables?: string[];
  includeFields?: string[];
  excludeFields?: string[];
  syncInterval?: number;
}

export interface UpdateSyncConfigurationData extends Partial<CreateSyncConfigurationData> {}

export interface SyncConfigurationWithRelations extends SyncConfiguration {
  project: Project;
}

// API表映射类型
export interface CreateAPITableMappingData {
  tableId: string;
  endpointId: string;
  mappingType: 'CRUD' | 'READ_ONLY' | 'WRITE_ONLY' | 'CUSTOM';
  operations: Array<'CREATE' | 'READ' | 'UPDATE' | 'DELETE'>;
  fieldMapping?: Record<string, string>;
}

export interface UpdateAPITableMappingData extends Partial<CreateAPITableMappingData> {}

export interface APITableMappingWithRelations extends APITableMapping {
  table: DatabaseTable;
  endpoint: APIEndpoint;
}

// API示例类型
export interface CreateAPIExampleData {
  endpointId: string;
  name: string;
  description?: string;
  type: 'request' | 'response';
  statusCode?: string;
  contentType?: string;
  data: any;
  headers?: Record<string, string>;
  isDefault?: boolean;
}

export interface UpdateAPIExampleData extends Partial<CreateAPIExampleData> {}

// API文档类型
export interface CreateAPIDocumentationData {
  endpointId: string;
  type: 'overview' | 'examples' | 'changelog' | 'notes';
  title: string;
  content: string;
  language?: string;
  sortOrder?: number;
  isPublic?: boolean;
  createdBy?: string;
}

export interface UpdateAPIDocumentationData extends Partial<CreateAPIDocumentationData> {}

// 搜索和筛选类型
export interface APIEndpointSearchFilters {
  projectId?: string;
  groupId?: string;
  status?: string;
  method?: string;
  deprecated?: boolean;
  authRequired?: boolean;
  relatedTableId?: string;
  tags?: string[];
  search?: string;
  implementationStatus?: string;
  testStatus?: string;
}

export interface APIEndpointSortOptions {
  field: 'name' | 'method' | 'path' | 'status' | 'createdAt' | 'updatedAt' | 'sortOrder';
  direction: 'asc' | 'desc';
}

export interface PaginationOptions {
  page: number;
  pageSize: number;
}

export interface PaginatedResult<T> {
  data: T[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

// 代码生成类型
export interface CodeGenerationOptions {
  language: 'typescript' | 'javascript' | 'python' | 'java' | 'csharp' | 'php';
  framework?: string;
  includeValidation?: boolean;
  includeDocumentation?: boolean;
  outputPath?: string;
}

export interface GeneratedCode {
  frontend?: string;
  backend?: string;
  documentation?: string;
  tests?: string;
}

// 导入/导出类型
export interface SwaggerImportOptions {
  projectId: string;
  groupId?: string;
  overwriteExisting?: boolean;
  createMissingGroups?: boolean;
  validateBeforeImport?: boolean;
  createdBy?: string;
}

export interface APIExportOptions {
  projectId: string;
  groupIds?: string[];
  format: 'swagger' | 'postman' | 'insomnia' | 'openapi';
  includeExamples?: boolean;
  includeTests?: boolean;
  version?: string;
}

// 统计和分析类型
export interface APIStatistics {
  total: number;
  byStatus: Record<string, number>;
  byMethod: Record<string, number>;
  byImplementationStatus: Record<string, number>;
  byTestStatus: Record<string, number>;
  byGroup: Record<string, number>;
  withRelatedTables: number;
  autoGenerated: number;
  lastUpdated: Date;
}

// WebSocket事件类型
export interface APIEndpointEvent {
  type: 'created' | 'updated' | 'deleted' | 'test_started' | 'test_completed';
  endpointId: string;
  projectId: string;
  data?: any;
  timestamp: Date;
  userId?: string;
}

// 批量操作类型
export interface BulkOperation {
  action: 'update' | 'delete' | 'move' | 'copy';
  endpointIds: string[];
  data?: any;
}

export interface BulkOperationResult {
  success: boolean;
  successCount: number;
  failureCount: number;
  errors: Array<{
    endpointId: string;
    error: string;
  }>;
}

// 同步结果类型
export interface SyncResult {
  success: boolean;
  message: string;
  createdEndpoints: number;
  updatedEndpoints: number;
  deletedEndpoints: number;
  conflicts: Array<{
    type: string;
    tableId?: string;
    endpointId?: string;
    description: string;
    resolution?: string;
  }>;
  errors: string[];
}

// 验证错误类型
export interface ValidationError {
  field: string;
  message: string;
  code: string;
  value?: any;
}

export interface APIValidationResult {
  valid: boolean;
  errors: ValidationError[];
  warnings: ValidationError[];
}