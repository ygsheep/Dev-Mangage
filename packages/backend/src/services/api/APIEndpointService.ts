import { PrismaClient, APIEndpoint, APIParameter, APIResponse } from '@prisma/client';
import { CreateAPIEndpointData, UpdateAPIEndpointData, APIEndpointWithRelations } from './types';
import logger from '../../utils/logger';

export class APIEndpointService {
  constructor(private prisma: PrismaClient) {}

  /**
   * 创建API端点
   */
  async createEndpoint(data: CreateAPIEndpointData): Promise<APIEndpointWithRelations> {
    try {
      logger.info('创建API端点', { 
        projectId: data.projectId, 
        method: data.method, 
        path: data.path 
      });

      const endpoint = await this.prisma.aPIEndpoint.create({
        data: {
          projectId: data.projectId,
          groupId: data.groupId,
          name: data.name,
          displayName: data.displayName,
          method: data.method,
          path: data.path,
          summary: data.summary,
          description: data.description,
          tags: data.tags ? JSON.stringify(data.tags) : null,
          deprecated: data.deprecated || false,
          version: data.version || '1.0.0',
          authRequired: data.authRequired || false,
          authType: data.authType,
          contentType: data.contentType || 'application/json',
          status: data.status || 'DRAFT',
          implementationStatus: data.implementationStatus || 'NOT_IMPLEMENTED',
          testStatus: data.testStatus || 'NOT_TESTED',
          relatedTableId: data.relatedTableId,
          autoGenerated: data.autoGenerated || false,
          createdBy: data.createdBy,
          sortOrder: data.sortOrder || 0,
          isPublic: data.isPublic || false,
          
          // 创建参数
          parameters: data.parameters ? {
            create: data.parameters.map((param, index) => ({
              name: param.name,
              displayName: param.displayName,
              type: param.type,
              dataType: param.dataType,
              format: param.format,
              required: param.required || false,
              defaultValue: param.defaultValue,
              description: param.description,
              example: param.example,
              enum: param.enum ? JSON.stringify(param.enum) : null,
              minimum: param.minimum,
              maximum: param.maximum,
              pattern: param.pattern,
              sortOrder: param.sortOrder || index,
              minLength: param.minLength,
              maxLength: param.maxLength,
              multipleOf: param.multipleOf,
              items: param.items ? JSON.stringify(param.items) : null,
              properties: param.properties ? JSON.stringify(param.properties) : null,
            }))
          } : undefined,
          
          // 创建响应
          responses: data.responses ? {
            create: data.responses.map(response => ({
              statusCode: response.statusCode,
              description: response.description,
              contentType: response.contentType || 'application/json',
              schema: response.schema ? JSON.stringify(response.schema) : null,
              example: response.example ? JSON.stringify(response.example) : null,
              headers: response.headers ? JSON.stringify(response.headers) : null,
              isDefault: response.isDefault || false,
            }))
          } : undefined,
        },
        include: {
          project: true,
          group: true,
          relatedTable: true,
          parameters: {
            orderBy: { sortOrder: 'asc' }
          },
          responses: {
            orderBy: { statusCode: 'asc' }
          },
          examples: true,
          testCases: true,
          documentation: {
            orderBy: { sortOrder: 'asc' }
          },
          history: {
            orderBy: { createdAt: 'desc' },
            take: 10
          },
          tableMappings: {
            include: {
              table: true
            }
          }
        }
      });

      // 记录历史
      await this.createHistory(endpoint.id, 'CREATE', {}, endpoint, '创建API端点', 'MANUAL', data.createdBy);

      logger.info('API端点创建成功', { endpointId: endpoint.id });
      return endpoint;
    } catch (error) {
      logger.error('创建API端点失败', error);
      throw error;
    }
  }

  /**
   * 更新API端点
   */
  async updateEndpoint(id: string, data: UpdateAPIEndpointData): Promise<APIEndpointWithRelations> {
    try {
      logger.info('更新API端点', { endpointId: id });

      // 获取更新前的数据
      const previousData = await this.getEndpointById(id);
      if (!previousData) {
        throw new Error('API端点不存在');
      }

      const endpoint = await this.prisma.aPIEndpoint.update({
        where: { id },
        data: {
          groupId: data.groupId,
          name: data.name,
          displayName: data.displayName,
          method: data.method,
          path: data.path,
          summary: data.summary,
          description: data.description,
          tags: data.tags ? JSON.stringify(data.tags) : undefined,
          deprecated: data.deprecated,
          version: data.version,
          authRequired: data.authRequired,
          authType: data.authType,
          scopes: data.scopes ? JSON.stringify(data.scopes) : undefined,
          rateLimit: data.rateLimit,
          contentType: data.contentType,
          produces: data.produces ? JSON.stringify(data.produces) : undefined,
          consumes: data.consumes ? JSON.stringify(data.consumes) : undefined,
          status: data.status,
          implementationStatus: data.implementationStatus,
          testStatus: data.testStatus,
          frontendCode: data.frontendCode,
          backendCode: data.backendCode,
          mockData: data.mockData ? JSON.stringify(data.mockData) : undefined,
          relatedTableId: data.relatedTableId,
          lastModifiedBy: data.lastModifiedBy,
          sortOrder: data.sortOrder,
          isPublic: data.isPublic,
          lastSyncAt: data.syncedFromModel ? new Date() : undefined,
          syncedFromModel: data.syncedFromModel,
        },
        include: {
          project: true,
          group: true,
          relatedTable: true,
          parameters: {
            orderBy: { sortOrder: 'asc' }
          },
          responses: {
            orderBy: { statusCode: 'asc' }
          },
          examples: true,
          testCases: true,
          documentation: {
            orderBy: { sortOrder: 'asc' }
          },
          history: {
            orderBy: { createdAt: 'desc' },
            take: 10
          },
          tableMappings: {
            include: {
              table: true
            }
          }
        }
      });

      // 记录历史
      await this.createHistory(
        endpoint.id,
        'UPDATE',
        previousData,
        endpoint,
        data.reason || '更新API端点',
        'MANUAL',
        data.lastModifiedBy
      );

      logger.info('API端点更新成功', { endpointId: id });
      return endpoint;
    } catch (error) {
      logger.error('更新API端点失败', error);
      throw error;
    }
  }

  /**
   * 删除API端点
   */
  async deleteEndpoint(id: string, deletedBy?: string): Promise<void> {
    try {
      logger.info('删除API端点', { endpointId: id });

      // 获取删除前的数据
      const previousData = await this.getEndpointById(id);
      if (!previousData) {
        throw new Error('API端点不存在');
      }

      // 记录删除历史
      await this.createHistory(
        id,
        'DELETE',
        previousData,
        {},
        '删除API端点',
        'MANUAL',
        deletedBy
      );

      await this.prisma.aPIEndpoint.delete({
        where: { id }
      });

      logger.info('API端点删除成功', { endpointId: id });
    } catch (error) {
      logger.error('删除API端点失败', error);
      throw error;
    }
  }

  /**
   * 获取API端点详情
   */
  async getEndpointById(id: string): Promise<APIEndpointWithRelations | null> {
    try {
      return await this.prisma.aPIEndpoint.findUnique({
        where: { id },
        include: {
          project: true,
          group: true,
          relatedTable: true,
          parameters: {
            orderBy: { sortOrder: 'asc' }
          },
          responses: {
            orderBy: { statusCode: 'asc' }
          },
          examples: true,
          testCases: true,
          documentation: {
            orderBy: { sortOrder: 'asc' }
          },
          history: {
            orderBy: { createdAt: 'desc' },
            take: 10
          },
          tableMappings: {
            include: {
              table: true
            }
          }
        }
      });
    } catch (error) {
      logger.error('获取API端点详情失败', error);
      throw error;
    }
  }

  /**
   * 获取项目的API端点列表
   */
  async getEndpointsByProject(
    projectId: string,
    filters?: {
      groupId?: string;
      status?: string;
      method?: string;
      deprecated?: boolean;
      search?: string;
    },
    pagination?: {
      page: number;
      pageSize: number;
    }
  ): Promise<{
    endpoints: APIEndpointWithRelations[];
    total: number;
    page: number;
    pageSize: number;
    totalPages: number;
  }> {
    try {
      const where: any = {
        projectId,
        ...(filters?.groupId && { groupId: filters.groupId }),
        ...(filters?.status && { status: filters.status }),
        ...(filters?.method && { method: filters.method }),
        ...(filters?.deprecated !== undefined && { deprecated: filters.deprecated }),
        ...(filters?.search && {
          OR: [
            { name: { contains: filters.search } },
            { displayName: { contains: filters.search } },
            { path: { contains: filters.search } },
            { description: { contains: filters.search } },
            { summary: { contains: filters.search } }
          ]
        })
      };

      const page = pagination?.page || 1;
      const pageSize = pagination?.pageSize || 20;
      const skip = (page - 1) * pageSize;

      const [endpoints, total] = await Promise.all([
        this.prisma.aPIEndpoint.findMany({
          where,
          include: {
            project: true,
            group: true,
            relatedTable: true,
            parameters: {
              orderBy: { sortOrder: 'asc' }
            },
            responses: {
              orderBy: { statusCode: 'asc' }
            },
            examples: true,
            testCases: true,
            documentation: {
              orderBy: { sortOrder: 'asc' }
            },
            history: {
              orderBy: { createdAt: 'desc' },
              take: 5
            },
            tableMappings: {
              include: {
                table: true
              }
            }
          },
          orderBy: [
            { sortOrder: 'asc' },
            { updatedAt: 'desc' }
          ],
          skip,
          take: pageSize
        }),
        this.prisma.aPIEndpoint.count({ where })
      ]);

      return {
        endpoints,
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize)
      };
    } catch (error) {
      logger.error('获取API端点列表失败', error);
      throw error;
    }
  }

  /**
   * 从数据表生成API端点
   */
  async generateFromTable(
    tableId: string,
    operations: Array<'CREATE' | 'READ' | 'UPDATE' | 'DELETE'>,
    options?: {
      groupId?: string;
      pathPrefix?: string;
      authRequired?: boolean;
      createdBy?: string;
    }
  ): Promise<APIEndpointWithRelations[]> {
    try {
      logger.info('从数据表生成API端点', { tableId, operations });

      // 获取表信息
      const table = await this.prisma.databaseTable.findUnique({
        where: { id: tableId },
        include: {
          fields: {
            orderBy: { sortOrder: 'asc' }
          }
        }
      });

      if (!table) {
        throw new Error('数据表不存在');
      }

      const endpoints: APIEndpointWithRelations[] = [];
      const basePath = `${options?.pathPrefix || ''}/${table.name.toLowerCase()}`;
      const pkField = table.fields.find(f => f.isPrimaryKey);

      for (const operation of operations) {
        let endpoint: APIEndpointWithRelations;

        switch (operation) {
          case 'CREATE':
            endpoint = await this.createEndpoint({
              projectId: table.projectId,
              groupId: options?.groupId,
              name: `create${table.displayName || table.name}`,
              displayName: `创建${table.displayName || table.name}`,
              method: 'POST',
              path: basePath,
              summary: `创建新的${table.displayName || table.name}`,
              description: `创建一个新的${table.displayName || table.name}记录`,
              authRequired: options?.authRequired || false,
              status: 'DRAFT',
              implementationStatus: 'NOT_IMPLEMENTED',
              testStatus: 'NOT_TESTED',
              relatedTableId: tableId,
              autoGenerated: true,
              syncedFromModel: true,
              createdBy: options?.createdBy,
              parameters: this.generateParametersFromFields(table.fields, 'body'),
              responses: [
                {
                  statusCode: '201',
                  description: '创建成功',
                  contentType: 'application/json',
                  schema: this.generateResponseSchema(table.fields),
                  isDefault: true
                },
                {
                  statusCode: '400',
                  description: '请求参数错误',
                  contentType: 'application/json'
                },
                {
                  statusCode: '422',
                  description: '数据验证失败',
                  contentType: 'application/json'
                }
              ]
            });
            break;

          case 'READ':
            // 生成列表查询端点
            endpoint = await this.createEndpoint({
              projectId: table.projectId,
              groupId: options?.groupId,
              name: `list${table.displayName || table.name}`,
              displayName: `查询${table.displayName || table.name}列表`,
              method: 'GET',
              path: basePath,
              summary: `获取${table.displayName || table.name}列表`,
              description: `分页查询${table.displayName || table.name}列表`,
              authRequired: options?.authRequired || false,
              status: 'DRAFT',
              implementationStatus: 'NOT_IMPLEMENTED',
              testStatus: 'NOT_TESTED',
              relatedTableId: tableId,
              autoGenerated: true,
              syncedFromModel: true,
              createdBy: options?.createdBy,
              parameters: [
                { name: 'page', type: 'query', dataType: 'integer', description: '页码', defaultValue: '1' },
                { name: 'pageSize', type: 'query', dataType: 'integer', description: '每页大小', defaultValue: '20' },
                { name: 'search', type: 'query', dataType: 'string', description: '搜索关键词' },
                ...table.fields.filter(f => f.isIndex || f.isUnique).map(f => ({
                  name: f.name,
                  type: 'query' as const,
                  dataType: this.mapFieldTypeToDataType(f.type),
                  description: `按${f.comment || f.name}筛选`
                }))
              ],
              responses: [
                {
                  statusCode: '200',
                  description: '查询成功',
                  contentType: 'application/json',
                  schema: {
                    type: 'object',
                    properties: {
                      data: {
                        type: 'array',
                        items: this.generateResponseSchema(table.fields)
                      },
                      pagination: {
                        type: 'object',
                        properties: {
                          page: { type: 'integer' },
                          pageSize: { type: 'integer' },
                          total: { type: 'integer' },
                          totalPages: { type: 'integer' }
                        }
                      }
                    }
                  },
                  isDefault: true
                }
              ]
            });
            
            // 如果有主键，生成详情查询端点
            if (pkField) {
              await this.createEndpoint({
                projectId: table.projectId,
                groupId: options?.groupId,
                name: `get${table.displayName || table.name}ById`,
                displayName: `获取${table.displayName || table.name}详情`,
                method: 'GET',
                path: `${basePath}/{${pkField.name}}`,
                summary: `根据ID获取${table.displayName || table.name}详情`,
                description: `根据${pkField.comment || pkField.name}获取${table.displayName || table.name}的详细信息`,
                authRequired: options?.authRequired || false,
                status: 'DRAFT',
                implementationStatus: 'NOT_IMPLEMENTED',
                testStatus: 'NOT_TESTED',
                relatedTableId: tableId,
                autoGenerated: true,
                syncedFromModel: true,
                createdBy: options?.createdBy,
                parameters: [
                  {
                    name: pkField.name,
                    type: 'path',
                    dataType: this.mapFieldTypeToDataType(pkField.type),
                    required: true,
                    description: pkField.comment || `${table.displayName || table.name}的唯一标识`
                  }
                ],
                responses: [
                  {
                    statusCode: '200',
                    description: '查询成功',
                    contentType: 'application/json',
                    schema: this.generateResponseSchema(table.fields),
                    isDefault: true
                  },
                  {
                    statusCode: '404',
                    description: '记录不存在',
                    contentType: 'application/json'
                  }
                ]
              });
            }
            break;

          case 'UPDATE':
            if (pkField) {
              endpoint = await this.createEndpoint({
                projectId: table.projectId,
                groupId: options?.groupId,
                name: `update${table.displayName || table.name}`,
                displayName: `更新${table.displayName || table.name}`,
                method: 'PUT',
                path: `${basePath}/{${pkField.name}}`,
                summary: `更新${table.displayName || table.name}信息`,
                description: `根据${pkField.comment || pkField.name}更新${table.displayName || table.name}的信息`,
                authRequired: options?.authRequired || false,
                status: 'DRAFT',
                implementationStatus: 'NOT_IMPLEMENTED',
                testStatus: 'NOT_TESTED',
                relatedTableId: tableId,
                autoGenerated: true,
                syncedFromModel: true,
                createdBy: options?.createdBy,
                parameters: [
                  {
                    name: pkField.name,
                    type: 'path',
                    dataType: this.mapFieldTypeToDataType(pkField.type),
                    required: true,
                    description: pkField.comment || `${table.displayName || table.name}的唯一标识`
                  },
                  ...this.generateParametersFromFields(
                    table.fields.filter(f => !f.isPrimaryKey && !f.isAutoIncrement),
                    'body'
                  )
                ],
                responses: [
                  {
                    statusCode: '200',
                    description: '更新成功',
                    contentType: 'application/json',
                    schema: this.generateResponseSchema(table.fields),
                    isDefault: true
                  },
                  {
                    statusCode: '404',
                    description: '记录不存在',
                    contentType: 'application/json'
                  },
                  {
                    statusCode: '400',
                    description: '请求参数错误',
                    contentType: 'application/json'
                  }
                ]
              });
            }
            break;

          case 'DELETE':
            if (pkField) {
              endpoint = await this.createEndpoint({
                projectId: table.projectId,
                groupId: options?.groupId,
                name: `delete${table.displayName || table.name}`,
                displayName: `删除${table.displayName || table.name}`,
                method: 'DELETE',
                path: `${basePath}/{${pkField.name}}`,
                summary: `删除${table.displayName || table.name}`,
                description: `根据${pkField.comment || pkField.name}删除${table.displayName || table.name}记录`,
                authRequired: options?.authRequired || false,
                status: 'DRAFT',
                implementationStatus: 'NOT_IMPLEMENTED',
                testStatus: 'NOT_TESTED',
                relatedTableId: tableId,
                autoGenerated: true,
                syncedFromModel: true,
                createdBy: options?.createdBy,
                parameters: [
                  {
                    name: pkField.name,
                    type: 'path',
                    dataType: this.mapFieldTypeToDataType(pkField.type),
                    required: true,
                    description: pkField.comment || `${table.displayName || table.name}的唯一标识`
                  }
                ],
                responses: [
                  {
                    statusCode: '204',
                    description: '删除成功',
                    isDefault: true
                  },
                  {
                    statusCode: '404',
                    description: '记录不存在',
                    contentType: 'application/json'
                  }
                ]
              });
            }
            break;
        }

        if (endpoint!) {
          endpoints.push(endpoint);
        }
      }

      logger.info('从数据表生成API端点完成', { tableId, count: endpoints.length });
      return endpoints;
    } catch (error) {
      logger.error('从数据表生成API端点失败', error);
      throw error;
    }
  }

  /**
   * 创建历史记录
   */
  private async createHistory(
    endpointId: string,
    changeType: string,
    previousData: any,
    newData: any,
    reason?: string,
    source?: string,
    createdBy?: string
  ): Promise<void> {
    try {
      await this.prisma.aPIHistory.create({
        data: {
          endpointId,
          changeType,
          changes: JSON.stringify(this.calculateChanges(previousData, newData)),
          previousData: JSON.stringify(previousData),
          newData: JSON.stringify(newData),
          reason,
          source: source || 'MANUAL',
          createdBy
        }
      });
    } catch (error) {
      logger.error('创建API历史记录失败', error);
    }
  }

  /**
   * 计算变更内容
   */
  private calculateChanges(previousData: any, newData: any): any {
    const changes: any = {};
    
    if (!previousData) {
      return { type: 'create', data: newData };
    }

    for (const key in newData) {
      if (previousData[key] !== newData[key]) {
        changes[key] = {
          from: previousData[key],
          to: newData[key]
        };
      }
    }

    return changes;
  }

  /**
   * 从字段生成参数定义
   */
  private generateParametersFromFields(fields: any[], paramType: string): any[] {
    return fields
      .filter(f => !f.isAutoIncrement)
      .map((field, index) => ({
        name: field.name,
        displayName: field.comment || field.name,
        type: paramType,
        dataType: this.mapFieldTypeToDataType(field.type),
        required: !field.nullable || field.isRequired,
        description: field.comment,
        sortOrder: index,
        ...(field.defaultValue && { defaultValue: field.defaultValue }),
        ...(field.length && { maxLength: field.length }),
        ...(field.checkConstraint && { pattern: field.checkConstraint })
      }));
  }

  /**
   * 生成响应模式
   */
  private generateResponseSchema(fields: any[]): any {
    const properties: any = {};
    
    fields.forEach(field => {
      properties[field.name] = {
        type: this.mapFieldTypeToSchemaType(field.type),
        description: field.comment,
        ...(field.nullable && { nullable: true }),
        ...(field.defaultValue && { default: field.defaultValue })
      };
    });

    return {
      type: 'object',
      properties
    };
  }

  /**
   * 映射字段类型到数据类型
   */
  private mapFieldTypeToDataType(fieldType: string): string {
    const typeMap: { [key: string]: string } = {
      'VARCHAR': 'string',
      'CHAR': 'string',
      'TEXT': 'string',
      'LONGTEXT': 'string',
      'INT': 'integer',
      'BIGINT': 'integer',
      'DECIMAL': 'number',
      'FLOAT': 'number',
      'DOUBLE': 'number',
      'BOOLEAN': 'boolean',
      'DATE': 'string',
      'DATETIME': 'string',
      'TIMESTAMP': 'string',
      'JSON': 'object'
    };

    return typeMap[fieldType.toUpperCase()] || 'string';
  }

  /**
   * 映射字段类型到JSON Schema类型
   */
  private mapFieldTypeToSchemaType(fieldType: string): string {
    const typeMap: { [key: string]: string } = {
      'VARCHAR': 'string',
      'CHAR': 'string',
      'TEXT': 'string',
      'LONGTEXT': 'string',
      'INT': 'integer',
      'BIGINT': 'integer',
      'DECIMAL': 'number',
      'FLOAT': 'number',
      'DOUBLE': 'number',
      'BOOLEAN': 'boolean',
      'DATE': 'string',
      'DATETIME': 'string',
      'TIMESTAMP': 'string',
      'JSON': 'object'
    };

    return typeMap[fieldType.toUpperCase()] || 'string';
  }
}